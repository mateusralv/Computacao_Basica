{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [],
   "source": [
    "import random\n",
    "Texto =[1,2,3,4,5,6,7]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [],
   "source": [
    "def plotar(x1,y1,x2,y2):\n",
    "    \"\"\"\n",
    "    Função que plota o homem e o cachorro\n",
    "    \"\"\"\n",
    "    for i in range (7):\n",
    "        Texto[i]=list('-------')\n",
    "    Texto[x2][y2]='C'\n",
    "    Texto[x1][y1]='M'\n",
    "    for i in range(7):\n",
    "      print(''.join(Texto[i]))\n",
    "    print('')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "M------\n",
      "-------\n",
      "-------\n",
      "-------\n",
      "-------\n",
      "-------\n",
      "------C\n",
      "\n",
      "M------\n",
      "-------\n",
      "-------\n",
      "-------\n",
      "-------\n",
      "------C\n",
      "-------\n",
      "\n",
      "-M-----\n",
      "-------\n",
      "-------\n",
      "-------\n",
      "-------\n",
      "------C\n",
      "-------\n",
      "\n",
      "-M-----\n",
      "-------\n",
      "-------\n",
      "-------\n",
      "-------\n",
      "-------\n",
      "------C\n",
      "\n",
      "-------\n",
      "-M-----\n",
      "-------\n",
      "-------\n",
      "-------\n",
      "-------\n",
      "------C\n",
      "\n",
      "-------\n",
      "-M-----\n",
      "-------\n",
      "-------\n",
      "-------\n",
      "------C\n",
      "-------\n",
      "\n",
      "-------\n",
      "--M----\n",
      "-------\n",
      "-------\n",
      "-------\n",
      "------C\n",
      "-------\n",
      "\n",
      "-------\n",
      "--M----\n",
      "-------\n",
      "-------\n",
      "------C\n",
      "-------\n",
      "-------\n",
      "\n",
      "-------\n",
      "---M---\n",
      "-------\n",
      "-------\n",
      "------C\n",
      "-------\n",
      "-------\n",
      "\n",
      "-------\n",
      "---M---\n",
      "-------\n",
      "-------\n",
      "-----C-\n",
      "-------\n",
      "-------\n",
      "\n",
      "-------\n",
      "-------\n",
      "---M---\n",
      "-------\n",
      "-----C-\n",
      "-------\n",
      "-------\n",
      "\n",
      "-------\n",
      "-------\n",
      "---M---\n",
      "-------\n",
      "-------\n",
      "-----C-\n",
      "-------\n",
      "\n",
      "-------\n",
      "-------\n",
      "-------\n",
      "---M---\n",
      "-------\n",
      "-----C-\n",
      "-------\n",
      "\n",
      "-------\n",
      "-------\n",
      "-------\n",
      "---M---\n",
      "-------\n",
      "------C\n",
      "-------\n",
      "\n",
      "-------\n",
      "-------\n",
      "-------\n",
      "----M--\n",
      "-------\n",
      "------C\n",
      "-------\n",
      "\n",
      "-------\n",
      "-------\n",
      "-------\n",
      "----M--\n",
      "-------\n",
      "-------\n",
      "------C\n",
      "\n",
      "-------\n",
      "-------\n",
      "-------\n",
      "-------\n",
      "----M--\n",
      "-------\n",
      "------C\n",
      "\n",
      "-------\n",
      "-------\n",
      "-------\n",
      "-------\n",
      "----M--\n",
      "------C\n",
      "-------\n",
      "\n",
      "-------\n",
      "-------\n",
      "-------\n",
      "-------\n",
      "-----M-\n",
      "------C\n",
      "-------\n",
      "\n",
      "-------\n",
      "-------\n",
      "-------\n",
      "-------\n",
      "-----MC\n",
      "-------\n",
      "-------\n",
      "\n",
      "-------\n",
      "-------\n",
      "-------\n",
      "-------\n",
      "------M\n",
      "-------\n",
      "-------\n",
      "\n",
      "pegou\n"
     ]
    }
   ],
   "source": [
    "npegou=True\n",
    "x1=0\n",
    "y1=0\n",
    "x2=6\n",
    "y2=6\n",
    "plotar(x1,y1,x2,y2)\n",
    "while npegou:\n",
    "    nandou=True;\n",
    "    while nandou:\n",
    "        nandou=False;\n",
    "        r=random.randint(0,3)\n",
    "        if (r==0):\n",
    "            x2=x2-1\n",
    "        if (r==1):\n",
    "            x2=x2+1\n",
    "        if (r==2):\n",
    "            y2=y2-1\n",
    "        if (r==3):\n",
    "            y2=y2+1\n",
    "        if (x2>6):\n",
    "            x2=6\n",
    "            nandou=True\n",
    "        elif (x2<0):\n",
    "            x2=0\n",
    "            nandou=True      \n",
    "        elif (y2>6):\n",
    "            y2=6\n",
    "            nandou=True\n",
    "        elif (y2<0):\n",
    "            y2=0\n",
    "            nandou=True         \n",
    "    plotar(x1,y1,x2,y2)\n",
    "    dx=x2-x1\n",
    "    dy=y2-y1\n",
    "    if (x1==x2) and (y1==y2):\n",
    "        npegou=False\n",
    "    else:\n",
    "        if abs(dx)>abs(dy):\n",
    "            if dx>0:\n",
    "                x1=x1+1\n",
    "            else:\n",
    "                x1=x1-1\n",
    "        else:\n",
    "            if dy>0:\n",
    "                y1=y1+1\n",
    "            else:\n",
    "                y1=y1-1\n",
    "        plotar(x1,y1,x2,y2)\n",
    "    if (x1==x2) and (y1==y2):\n",
    "        npegou=False\n",
    "    \n",
    "print('pegou')\n",
    "            "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
